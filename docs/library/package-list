$dokka.format:html
$dokka.linkExtension:html
$dokka.location:io.getstream.chat.android.livedata$addReaction(io.getstream.chat.android.client.models.Message, io.getstream.chat.android.client.models.Reaction, kotlin.Boolean)io.getstream.chat.android.livedata/io.getstream.chat.android.client.models.-message/add-reaction.html
$dokka.location:io.getstream.chat.android.livedata$isChannelEvent(io.getstream.chat.android.client.events.ChatEvent)io.getstream.chat.android.livedata/io.getstream.chat.android.client.events.-chat-event/is-channel-event.html
$dokka.location:io.getstream.chat.android.livedata$isPermanent(io.getstream.chat.android.client.errors.ChatError)io.getstream.chat.android.livedata/io.getstream.chat.android.client.errors.-chat-error/is-permanent.html
$dokka.location:io.getstream.chat.android.livedata$removeReaction(io.getstream.chat.android.client.models.Message, io.getstream.chat.android.client.models.Reaction, kotlin.Boolean)io.getstream.chat.android.livedata/io.getstream.chat.android.client.models.-message/remove-reaction.html
$dokka.location:io.getstream.chat.android.livedata$users(io.getstream.chat.android.client.models.Channel)io.getstream.chat.android.livedata/io.getstream.chat.android.client.models.-channel/users.html
$dokka.location:io.getstream.chat.android.livedata$users(io.getstream.chat.android.client.models.Message)io.getstream.chat.android.livedata/io.getstream.chat.android.client.models.-message/users.html
io.getstream.chat.android.livedata
io.getstream.chat.android.livedata.controller
io.getstream.chat.android.livedata.converter
io.getstream.chat.android.livedata.dao
io.getstream.chat.android.livedata.entity
io.getstream.chat.android.livedata.repository
io.getstream.chat.android.livedata.request
io.getstream.chat.android.livedata.usecase
io.getstream.chat.android.livedata.utils
io.getstream.chat.android.livedata.worker
